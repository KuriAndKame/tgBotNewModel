import edge_tts
import asyncio
import os
import time
import shutil
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import News, Articles
from datetime import datetime

# Настройки голосов
VOICES = {
    'female': 'ru-RU-SvetlanaNeural',  # женский голос
    'male': 'ru-RU-DmitryNeural'       # мужской голос
}

# Настройки путей
output_folder = "audio_files"
web_folder = "C:/OpenServer/domains/yoursite.local/audio/"
web_url = "http://yoursite.local/audio/"

processed_items = set()

# Настройки базы данных
DATABASE_URL = "sqlite:///your_database.db"
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)

# Создаем папки
os.makedirs(output_folder, exist_ok=True)
os.makedirs(web_folder, exist_ok=True)

def load_already_processed_items():
    if os.path.exists('processed_items.txt'):
        with open('processed_items.txt', 'r') as f:
            for line in f:
                processed_items.add(line.strip())

def save_processed_items():
    with open('processed_items.txt', 'w') as f:
        for item_id in processed_items:
            f.write(item_id + '\n')

async def generate_speech(text, output_file, voice):
    try:
        tts = edge_tts.Communicate(text=text, voice=voice)
        await tts.save(output_file)
    except Exception as e:
        print(f"Ошибка при генерации речи ({voice}): {e}")

def upload_to_website(local_path, web_path):
    try:
        shutil.copy2(local_path, web_path)
        print(f"Файл загружен на сайт: {web_path}")
        return True
    except Exception as e:
        print(f"Ошибка при загрузке на сайт: {e}")
        return False

def process_item(item, table_name):
    try:
        item_id = f"{table_name}:{item.id}"
        if item_id in processed_items:
            return None
            
        text = item.refactoredText
        title = item.refactoredTitle
        
        if not text or not text.strip():
            print(f"Запись {item_id} пуста, пропускаем.")
            return None
        
        # Генерируем оба варианта аудио
        audio_urls = {}
        for gender, voice in VOICES.items():
            safe_title = "".join(c if c.isalnum() or c in " _-" else "_" for c in title)
            filename = f"{safe_title}_{table_name}_{gender}.mp3"
            
            local_file = os.path.join(output_folder, filename)
            web_file = os.path.join(web_folder, filename)
            public_url = f"{web_url}{filename}"
            
            # Генерируем речь
            asyncio.run(generate_speech(text, local_file, voice))
            
            # Загружаем на сайт
            if upload_to_website(local_file, web_file):
                audio_urls[gender] = public_url
                print(f"Создан {gender} вариант: {public_url}")
            else:
                audio_urls[gender] = None
        
        if any(audio_urls.values()):
            processed_items.add(item_id)
            return audio_urls
        return None
        
    except Exception as e:
        print(f"Ошибка при обработке записи {item_id}: {e}")
        return None

def update_database_with_urls(session, item, urls):
    try:
        if hasattr(item, 'audio_url_female') and hasattr(item, 'audio_url_male'):
            item.audio_url_female = urls.get('female')
            item.audio_url_male = urls.get('male')
            session.commit()
            print(f"Обновлена запись {item.id} с URL аудио")
    except Exception as e:
        session.rollback()
        print(f"Ошибка при обновлении БД: {e}")

def monitor_database():
    print("Мониторинг базы данных начат...")
    load_already_processed_items()
    
    try:
        while True:
            session = Session()
            try:
                # Обрабатываем таблицу News
                news_items = session.query(News).filter(
                    News.refactoredText.isnot(None),
                    News.refactoredTitle.isnot(None),
                    News.audio_url_female.is_(None)  # Проверяем отсутствие женской версии
                ).all()
                
                for item in news_items:
                    audio_urls = process_item(item, "news")
                    if audio_urls:
                        update_database_with_urls(session, item, audio_urls)
                
                # Обрабатываем таблицу Articles
                articles_items = session.query(Articles).filter(
                    Articles.refactoredText.isnot(None),
                    Articles.refactoredTitle.isnot(None),
                    Articles.audio_url_female.is_(None)  # Проверяем отсутствие женской версии
                ).all()
                
                for item in articles_items:
                    audio_urls = process_item(item, "articles")
                    if audio_urls:
                        update_database_with_urls(session, item, audio_urls)
                
                session.commit()
            except Exception as e:
                session.rollback()
                print(f"Ошибка при работе с базой данных: {e}")
            finally:
                session.close()
            
            time.sleep(60)
    except KeyboardInterrupt:
        save_processed_items()
        print("Мониторинг остановлен.")

if __name__ == "__main__":
    monitor_database()
